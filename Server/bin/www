#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../main/app');
var debug = require('debug')('server:server');
var http = require('http');
var bodyParser = require("body-parser");
//var ExtractJwt = passportJWT.ExtractJwt;
//var JwtStrategy = passportJWT.Strategy;
var jwt = require('jsonwebtoken');
var passportJWT = require("passport-jwt");
app.use(bodyParser.urlencoded({
  extended: true
}));
const io = require('socket.io').listen(server);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var listConnectedUsers = {}

io.on('connection', function connection (socket) {
  let usersList = (newuser) => {
    listConnectedUsers.push(newuser)
    return listConnectedUsers
  }
  console.log('')
  /********************* users:connect ****************** */
  // событие наступает когда пользователь впервые заходит в чат
  socket.on('users:add', function (username) {
    let authorization = req.headers.authorization
    try {
      var decoded = jwt.verify(authorization, jwtOptions.secretOrKey)
    } catch (err) {
      return res.status(401).json({message: err});
    }
    let userId = decoded.id
    let me = { 
      socketId: {
      username: username,
      socketId: socket.id,
      userId: userId,
      activeRoom: null // По умолчанию
      }
    }
    /********************* users:list event *******************/
    socket.emit('users:list', usersList(me))
    /********************* users:add event *******************/
    socket.broadcast
      .emit('users:add', me);
  })
})



/******************** users:leave **************/
